pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Deploy To Test Guild'){
            steps {
                withCredentials([string(credentialsId: 'EVE_STAGING_DISCORD_BOT_TOKEN', variable: 'EVE_STAGING_DISCORD_BOT_TOKEN'),
                string(credentialsId: 'MEE6_AUTHORIZATION', variable: 'MEE6_AUTHORIZATION'),
                string(credentialsId: 'WOLFRAM_API_TOKEN', variable: 'WOLFRAM_API_TOKEN')]) {
                    sh('''
export COMPOSE_PROJECT_NAME=eve_test;
export TOKEN=${EVE_STAGING_DISCORD_BOT_TOKEN};
export GUILD_ID="465036366699429888";
./CI/deploy_to_discord_guild.sh;
                    ''')
                }
            }
        }
        stage('Deploy To PROD Guild'){
        steps {
            withCredentials([string(credentialsId: 'EVE_PROD_DISCORD_BOT_TOKEN', variable: 'EVE_PROD_DISCORD_BOT_TOKEN'),
            string(credentialsId: 'MEE6_AUTHORIZATION', variable: 'MEE6_AUTHORIZATION'),
            string(credentialsId: 'WOLFRAM_API_TOKEN', variable: 'WOLFRAM_API_TOKEN')]) {
                sh('''
export COMPOSE_PROJECT_NAME=eve_prod;
export TOKEN=${EVE_PROD_DISCORD_BOT_TOKEN};
export GUILD_ID="228761314644852736";
./CI/deploy_to_discord_guild.sh;
                ''')
              }
            }
        }
    }
    post {
        always {
            script {
                if (fileExists('test_results/all-unit-tests.xml')){
                    junit 'test_results/all-unit-tests.xml'
                }
                def summary = ''
                if (fileExists('OUTPUT')){
                    summary=readFile('OUTPUT').trim()
                    theTitle = "ISSUE DETECTED"
                    status = false
                }else{
                    if (currentBuild.currentResult == "SUCCESS"){
                        theTitle = "SUCCESS"
                        summary = "No issues detected"
                        status = true
                    }else{
                        theTitle = "ISSUE DETECTED"
                        summary = "Please look at Jenkins for more info"
                        status = false
                    }
                }

                withCredentials([string(credentialsId: 'DISCORD_WEBHOOK', variable: 'WEBHOOKURL')]) {
                    discordSend description: "Branch or PR Name: " + BRANCH_NAME + '\n' + summary, footer: env.GIT_COMMIT, link: env.BUILD_URL, successful: status, title: theTitle, webhookURL: '$WEBHOOKURL'
                }
            }
            cleanWs(
            cleanWhenAborted: true,
            cleanWhenFailure: true,
            cleanWhenNotBuilt: false,
            cleanWhenSuccess: true,
            cleanWhenUnstable: true,
            deleteDirs: true,
            disableDeferredWipeout: true
        )
        }
    }
}
